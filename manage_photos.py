#!/usr/bin/env python3
"""
Script pour g√©rer les photos des membres JeunAct
Corrige automatiquement les probl√®mes de noms de fichiers
"""

import sqlite3
import os
import shutil
from pathlib import Path

def clean_filename(filename):
    """Nettoie le nom de fichier en supprimant les espaces et caract√®res sp√©ciaux"""
    # Supprime les espaces en d√©but et fin
    filename = filename.strip()
    # Remplace les espaces par des underscores
    filename = filename.replace(' ', '_')
    # Supprime les caract√®res sp√©ciaux
    filename = ''.join(c for c in filename if c.isalnum() or c in '._-')
    return filename

def list_photos_with_issues():
    """Liste les photos qui ont des probl√®mes de nommage"""
    photos_dir = Path("static/photos")
    if not photos_dir.exists():
        print("‚ùå Le dossier static/photos n'existe pas!")
        return []
    
    issues = []
    for file in photos_dir.iterdir():
        if file.is_file() and file.suffix.lower() in ['.jpg', '.jpeg', '.png', '.gif']:
            original_name = file.name
            clean_name = clean_filename(original_name)
            if original_name != clean_name:
                issues.append((original_name, clean_name))
    
    return issues

def fix_photo_filenames():
    """Corrige automatiquement les noms de fichiers probl√©matiques"""
    issues = list_photos_with_issues()
    
    if not issues:
        print("‚úÖ Aucun probl√®me de nommage d√©tect√©!")
        return
    
    print(f"üîß {len(issues)} fichier(s) avec des probl√®mes de nommage d√©tect√©(s):")
    
    conn = sqlite3.connect('instance/jeunact_members.db')
    cursor = conn.cursor()
    
    for original_name, clean_name in issues:
        print(f"  üìÅ {original_name} ‚Üí {clean_name}")
        
        # Renomme le fichier
        old_path = Path("static/photos") / original_name
        new_path = Path("static/photos") / clean_name
        
        try:
            shutil.move(str(old_path), str(new_path))
            print(f"    ‚úÖ Fichier renomm√©")
            
            # Met √† jour la base de donn√©es
            old_photo_path = f"photos/{original_name}"
            new_photo_path = f"photos/{clean_name}"
            
            cursor.execute('UPDATE member SET photo = ? WHERE photo = ?', 
                         (new_photo_path, old_photo_path))
            
            if cursor.rowcount > 0:
                print(f"    ‚úÖ Base de donn√©es mise √† jour ({cursor.rowcount} membre(s))")
            
        except Exception as e:
            print(f"    ‚ùå Erreur: {e}")
    
    conn.commit()
    conn.close()
    print("üéâ Correction termin√©e!")

def add_new_photo(photo_path, member_id=None):
    """Ajoute une nouvelle photo et la nettoie automatiquement"""
    if not os.path.exists(photo_path):
        print(f"‚ùå Le fichier {photo_path} n'existe pas!")
        return None
    
    # G√©n√®re un nom propre
    original_name = os.path.basename(photo_path)
    clean_name = clean_filename(original_name)
    
    # Copie le fichier vers static/photos
    destination = Path("static/photos") / clean_name
    shutil.copy2(photo_path, destination)
    
    photo_db_path = f"photos/{clean_name}"
    print(f"‚úÖ Photo ajout√©e: {photo_db_path}")
    
    # Si un member_id est fourni, met √† jour directement
    if member_id:
        conn = sqlite3.connect('instance/jeunact_members.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE member SET photo = ? WHERE id = ?', 
                      (photo_db_path, member_id))
        conn.commit()
        conn.close()
        print(f"‚úÖ Photo assign√©e au membre ID {member_id}")
    
    return photo_db_path

def show_current_status():
    """Affiche le statut actuel des photos"""
    print("üìä Statut actuel des photos:")
    print("=" * 50)
    
    # Photos disponibles
    photos_dir = Path("static/photos")
    if photos_dir.exists():
        photos = [f.name for f in photos_dir.iterdir() 
                 if f.is_file() and f.suffix.lower() in ['.jpg', '.jpeg', '.png', '.gif']]
        print(f"üì∏ Photos disponibles ({len(photos)}):")
        for photo in sorted(photos):
            print(f"  ‚Ä¢ {photo}")
    else:
        print("‚ùå Dossier static/photos introuvable")
    
    # Membres et leurs photos
    conn = sqlite3.connect('instance/jeunact_members.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, full_name, photo FROM member ORDER BY id')
    members = cursor.fetchall()
    conn.close()
    
    print(f"\nüë• Membres ({len(members)}):")
    for member in members:
        member_id, name, photo = member
        if photo:
            photo_exists = (photos_dir / photo.replace('photos/', '')).exists()
            status = "‚úÖ" if photo_exists else "‚ùå"
            print(f"  ID {member_id}: {name} - {photo} {status}")
        else:
            print(f"  ID {member_id}: {name} - Pas de photo")

def main():
    print("üñºÔ∏è  Gestionnaire de photos JeunAct")
    print("=" * 50)
    
    while True:
        print("\nüõ†Ô∏è  Options disponibles:")
        print("1. Voir le statut actuel")
        print("2. Corriger automatiquement les noms de fichiers")
        print("3. Ajouter une nouvelle photo")
        print("4. Quitter")
        
        choice = input("\nChoisissez une option (1-4): ").strip()
        
        if choice == '1':
            show_current_status()
        
        elif choice == '2':
            fix_photo_filenames()
        
        elif choice == '3':
            photo_path = input("Chemin vers la nouvelle photo: ").strip()
            member_id = input("ID du membre (optionnel, appuyez sur Entr√©e pour ignorer): ").strip()
            member_id = int(member_id) if member_id.isdigit() else None
            add_new_photo(photo_path, member_id)
        
        elif choice == '4':
            print("üëã Au revoir!")
            break
        
        else:
            print("‚ùå Option invalide!")

if __name__ == "__main__":
    main()
